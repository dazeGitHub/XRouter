apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
//apply plugin: 'maven'
apply plugin: 'maven-publish'
//apply plugin: 'com.github.dcendents.android-maven'
//group='com.github.dazeGitHub'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation rootProject.ext.dependencies.publicImplementation
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

afterEvaluate {
    publishing {
        def localDefaultRepoUri =  uri("${rootProject.projectDir}/repo");

        publications {
            release(MavenPublication) {
                // 依赖 bundleReleaseAar 任务，并上传其产出的aar
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) } // 方式一：生成aar包
//                artifact "$localDefaultRepoUri/outputs/aar/${project.name}-release.aar" // 方式二：指定生成的aar路径 (不好使)
                artifact sourceJar // 上传源码
                groupId = 'com.github.dazeGitHub'
                artifactId = 'xrouter'
                version = '5.1.2'
                // pom文件中声明依赖，从而传递到使用方
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        // 避免出现空节点或 artifactId=unspecified 的节点
                        if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                            println "dependency=${it.toString()}"
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'implementation')
                        }
                    }
                }
            }
            snapshot(MavenPublication) {
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
                artifact sourceJar // 上传源码
                groupId = 'com.github.dazeGitHub'
                artifactId = 'xrouter'
                version = '5.1.2'
                // pom文件中声明依赖，从而传递到使用方
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        // 避免出现空节点或 artifactId=unspecified 的节点
                        if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                            println "dependency=${it.toString()}"
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'implementation')
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name ="local"
                allowInsecureProtocol true
                url = localDefaultRepoUri
            }
            maven {
                credentials {
                    username = "username"
                    password = "password"
                }
                name ="release" //这里的 name 和 publications 的 release 对应
                allowInsecureProtocol true
                url = '../repo/release'
            }
            maven {
                name ="snapshot"
                credentials {
                    username = "username"
                    password = "password"
                }
                allowInsecureProtocol true
                url = '../repo/snapshot'
            }
        }
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.getSrcDirs() // 源码路径
    archiveClassifier = "sources"
}